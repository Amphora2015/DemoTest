//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace VaultUtils.SempraDocWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SempraDocWSSoap", Namespace="http://tempuri.org/")]
    public partial class SempraDocWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ImportDocIntoVaultOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportDocIntoVaultByVaultTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportDocByStreamOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportDocByStreamByVaultTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocFromVaultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocFromVaultByVaultTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestDocStreamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestDocStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback HelloOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SempraDocWS() {
            this.Url = "http://stfaxgateway/SempraDocumentWebService/SempraDocWS.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ImportDocIntoVaultCompletedEventHandler ImportDocIntoVaultCompleted;
        
        /// <remarks/>
        public event ImportDocIntoVaultByVaultTypeCompletedEventHandler ImportDocIntoVaultByVaultTypeCompleted;
        
        /// <remarks/>
        public event ImportDocByStreamCompletedEventHandler ImportDocByStreamCompleted;
        
        /// <remarks/>
        public event ImportDocByStreamByVaultTypeCompletedEventHandler ImportDocByStreamByVaultTypeCompleted;
        
        /// <remarks/>
        public event GetDocFromVaultCompletedEventHandler GetDocFromVaultCompleted;
        
        /// <remarks/>
        public event GetDocFromVaultByVaultTypeCompletedEventHandler GetDocFromVaultByVaultTypeCompleted;
        
        /// <remarks/>
        public event GetLatestDocStreamCompletedEventHandler GetLatestDocStreamCompleted;
        
        /// <remarks/>
        public event GetLatestDocStringCompletedEventHandler GetLatestDocStringCompleted;
        
        /// <remarks/>
        public event GetDocumentListCompletedEventHandler GetDocumentListCompleted;
        
        /// <remarks/>
        public event HelloCompletedEventHandler HelloCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportDocIntoVault", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportDocIntoVault(string docRepository, string docFileURL, string fieldNames, string fieldValues, string onBehalfUserName, bool deleteFileAfterVault, string dslName) {
            object[] results = this.Invoke("ImportDocIntoVault", new object[] {
                        docRepository,
                        docFileURL,
                        fieldNames,
                        fieldValues,
                        onBehalfUserName,
                        deleteFileAfterVault,
                        dslName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportDocIntoVaultAsync(string docRepository, string docFileURL, string fieldNames, string fieldValues, string onBehalfUserName, bool deleteFileAfterVault, string dslName) {
            this.ImportDocIntoVaultAsync(docRepository, docFileURL, fieldNames, fieldValues, onBehalfUserName, deleteFileAfterVault, dslName, null);
        }
        
        /// <remarks/>
        public void ImportDocIntoVaultAsync(string docRepository, string docFileURL, string fieldNames, string fieldValues, string onBehalfUserName, bool deleteFileAfterVault, string dslName, object userState) {
            if ((this.ImportDocIntoVaultOperationCompleted == null)) {
                this.ImportDocIntoVaultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportDocIntoVaultOperationCompleted);
            }
            this.InvokeAsync("ImportDocIntoVault", new object[] {
                        docRepository,
                        docFileURL,
                        fieldNames,
                        fieldValues,
                        onBehalfUserName,
                        deleteFileAfterVault,
                        dslName}, this.ImportDocIntoVaultOperationCompleted, userState);
        }
        
        private void OnImportDocIntoVaultOperationCompleted(object arg) {
            if ((this.ImportDocIntoVaultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportDocIntoVaultCompleted(this, new ImportDocIntoVaultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportDocIntoVaultByVaultType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportDocIntoVaultByVaultType(string vaultType, string docRepository, string docFileURL, string fieldNames, string fieldValues, string onBehalfUserName, bool deleteFileAfterVault, string dslName) {
            object[] results = this.Invoke("ImportDocIntoVaultByVaultType", new object[] {
                        vaultType,
                        docRepository,
                        docFileURL,
                        fieldNames,
                        fieldValues,
                        onBehalfUserName,
                        deleteFileAfterVault,
                        dslName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportDocIntoVaultByVaultTypeAsync(string vaultType, string docRepository, string docFileURL, string fieldNames, string fieldValues, string onBehalfUserName, bool deleteFileAfterVault, string dslName) {
            this.ImportDocIntoVaultByVaultTypeAsync(vaultType, docRepository, docFileURL, fieldNames, fieldValues, onBehalfUserName, deleteFileAfterVault, dslName, null);
        }
        
        /// <remarks/>
        public void ImportDocIntoVaultByVaultTypeAsync(string vaultType, string docRepository, string docFileURL, string fieldNames, string fieldValues, string onBehalfUserName, bool deleteFileAfterVault, string dslName, object userState) {
            if ((this.ImportDocIntoVaultByVaultTypeOperationCompleted == null)) {
                this.ImportDocIntoVaultByVaultTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportDocIntoVaultByVaultTypeOperationCompleted);
            }
            this.InvokeAsync("ImportDocIntoVaultByVaultType", new object[] {
                        vaultType,
                        docRepository,
                        docFileURL,
                        fieldNames,
                        fieldValues,
                        onBehalfUserName,
                        deleteFileAfterVault,
                        dslName}, this.ImportDocIntoVaultByVaultTypeOperationCompleted, userState);
        }
        
        private void OnImportDocIntoVaultByVaultTypeOperationCompleted(object arg) {
            if ((this.ImportDocIntoVaultByVaultTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportDocIntoVaultByVaultTypeCompleted(this, new ImportDocIntoVaultByVaultTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportDocByStream", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportDocByStream(string docRepository, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, string fileType, string fieldNames, string fieldValues, string onBehalfUserName, string dslName) {
            object[] results = this.Invoke("ImportDocByStream", new object[] {
                        docRepository,
                        data,
                        fileType,
                        fieldNames,
                        fieldValues,
                        onBehalfUserName,
                        dslName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportDocByStreamAsync(string docRepository, byte[] data, string fileType, string fieldNames, string fieldValues, string onBehalfUserName, string dslName) {
            this.ImportDocByStreamAsync(docRepository, data, fileType, fieldNames, fieldValues, onBehalfUserName, dslName, null);
        }
        
        /// <remarks/>
        public void ImportDocByStreamAsync(string docRepository, byte[] data, string fileType, string fieldNames, string fieldValues, string onBehalfUserName, string dslName, object userState) {
            if ((this.ImportDocByStreamOperationCompleted == null)) {
                this.ImportDocByStreamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportDocByStreamOperationCompleted);
            }
            this.InvokeAsync("ImportDocByStream", new object[] {
                        docRepository,
                        data,
                        fileType,
                        fieldNames,
                        fieldValues,
                        onBehalfUserName,
                        dslName}, this.ImportDocByStreamOperationCompleted, userState);
        }
        
        private void OnImportDocByStreamOperationCompleted(object arg) {
            if ((this.ImportDocByStreamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportDocByStreamCompleted(this, new ImportDocByStreamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportDocByStreamByVaultType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportDocByStreamByVaultType(string vaultType, string docRepository, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, string fileType, string fieldNames, string fieldValues, string onBehalfUserName, string dslName) {
            object[] results = this.Invoke("ImportDocByStreamByVaultType", new object[] {
                        vaultType,
                        docRepository,
                        data,
                        fileType,
                        fieldNames,
                        fieldValues,
                        onBehalfUserName,
                        dslName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportDocByStreamByVaultTypeAsync(string vaultType, string docRepository, byte[] data, string fileType, string fieldNames, string fieldValues, string onBehalfUserName, string dslName) {
            this.ImportDocByStreamByVaultTypeAsync(vaultType, docRepository, data, fileType, fieldNames, fieldValues, onBehalfUserName, dslName, null);
        }
        
        /// <remarks/>
        public void ImportDocByStreamByVaultTypeAsync(string vaultType, string docRepository, byte[] data, string fileType, string fieldNames, string fieldValues, string onBehalfUserName, string dslName, object userState) {
            if ((this.ImportDocByStreamByVaultTypeOperationCompleted == null)) {
                this.ImportDocByStreamByVaultTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportDocByStreamByVaultTypeOperationCompleted);
            }
            this.InvokeAsync("ImportDocByStreamByVaultType", new object[] {
                        vaultType,
                        docRepository,
                        data,
                        fileType,
                        fieldNames,
                        fieldValues,
                        onBehalfUserName,
                        dslName}, this.ImportDocByStreamByVaultTypeOperationCompleted, userState);
        }
        
        private void OnImportDocByStreamByVaultTypeOperationCompleted(object arg) {
            if ((this.ImportDocByStreamByVaultTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportDocByStreamByVaultTypeCompleted(this, new ImportDocByStreamByVaultTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocFromVault", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocFromVault(string docRepository, string docResourceID, string directory, string fileName, string dslName, out string fileLocation) {
            object[] results = this.Invoke("GetDocFromVault", new object[] {
                        docRepository,
                        docResourceID,
                        directory,
                        fileName,
                        dslName});
            fileLocation = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocFromVaultAsync(string docRepository, string docResourceID, string directory, string fileName, string dslName) {
            this.GetDocFromVaultAsync(docRepository, docResourceID, directory, fileName, dslName, null);
        }
        
        /// <remarks/>
        public void GetDocFromVaultAsync(string docRepository, string docResourceID, string directory, string fileName, string dslName, object userState) {
            if ((this.GetDocFromVaultOperationCompleted == null)) {
                this.GetDocFromVaultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocFromVaultOperationCompleted);
            }
            this.InvokeAsync("GetDocFromVault", new object[] {
                        docRepository,
                        docResourceID,
                        directory,
                        fileName,
                        dslName}, this.GetDocFromVaultOperationCompleted, userState);
        }
        
        private void OnGetDocFromVaultOperationCompleted(object arg) {
            if ((this.GetDocFromVaultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocFromVaultCompleted(this, new GetDocFromVaultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocFromVaultByVaultType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocFromVaultByVaultType(string vaultType, string docRepository, string docResourceID, string directory, string fileName, string dslName, out string fileLocation) {
            object[] results = this.Invoke("GetDocFromVaultByVaultType", new object[] {
                        vaultType,
                        docRepository,
                        docResourceID,
                        directory,
                        fileName,
                        dslName});
            fileLocation = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocFromVaultByVaultTypeAsync(string vaultType, string docRepository, string docResourceID, string directory, string fileName, string dslName) {
            this.GetDocFromVaultByVaultTypeAsync(vaultType, docRepository, docResourceID, directory, fileName, dslName, null);
        }
        
        /// <remarks/>
        public void GetDocFromVaultByVaultTypeAsync(string vaultType, string docRepository, string docResourceID, string directory, string fileName, string dslName, object userState) {
            if ((this.GetDocFromVaultByVaultTypeOperationCompleted == null)) {
                this.GetDocFromVaultByVaultTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocFromVaultByVaultTypeOperationCompleted);
            }
            this.InvokeAsync("GetDocFromVaultByVaultType", new object[] {
                        vaultType,
                        docRepository,
                        docResourceID,
                        directory,
                        fileName,
                        dslName}, this.GetDocFromVaultByVaultTypeOperationCompleted, userState);
        }
        
        private void OnGetDocFromVaultByVaultTypeOperationCompleted(object arg) {
            if ((this.GetDocFromVaultByVaultTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocFromVaultByVaultTypeCompleted(this, new GetDocFromVaultByVaultTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLatestDocStream", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLatestDocStream(string docRepository, string docResourceID, string dslName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] docStream, out string fileType) {
            object[] results = this.Invoke("GetLatestDocStream", new object[] {
                        docRepository,
                        docResourceID,
                        dslName});
            docStream = ((byte[])(results[1]));
            fileType = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestDocStreamAsync(string docRepository, string docResourceID, string dslName) {
            this.GetLatestDocStreamAsync(docRepository, docResourceID, dslName, null);
        }
        
        /// <remarks/>
        public void GetLatestDocStreamAsync(string docRepository, string docResourceID, string dslName, object userState) {
            if ((this.GetLatestDocStreamOperationCompleted == null)) {
                this.GetLatestDocStreamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestDocStreamOperationCompleted);
            }
            this.InvokeAsync("GetLatestDocStream", new object[] {
                        docRepository,
                        docResourceID,
                        dslName}, this.GetLatestDocStreamOperationCompleted, userState);
        }
        
        private void OnGetLatestDocStreamOperationCompleted(object arg) {
            if ((this.GetLatestDocStreamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestDocStreamCompleted(this, new GetLatestDocStreamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLatestDocString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLatestDocString(string docRepository, string docResourceID, string dslName, out string docStream, out string fileType) {
            object[] results = this.Invoke("GetLatestDocString", new object[] {
                        docRepository,
                        docResourceID,
                        dslName});
            docStream = ((string)(results[1]));
            fileType = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestDocStringAsync(string docRepository, string docResourceID, string dslName) {
            this.GetLatestDocStringAsync(docRepository, docResourceID, dslName, null);
        }
        
        /// <remarks/>
        public void GetLatestDocStringAsync(string docRepository, string docResourceID, string dslName, object userState) {
            if ((this.GetLatestDocStringOperationCompleted == null)) {
                this.GetLatestDocStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestDocStringOperationCompleted);
            }
            this.InvokeAsync("GetLatestDocString", new object[] {
                        docRepository,
                        docResourceID,
                        dslName}, this.GetLatestDocStringOperationCompleted, userState);
        }
        
        private void OnGetLatestDocStringOperationCompleted(object arg) {
            if ((this.GetLatestDocStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestDocStringCompleted(this, new GetLatestDocStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocumentList(string docRepository, string fieldNames, string fieldValues, bool latestVersionOnly, string dslName) {
            object[] results = this.Invoke("GetDocumentList", new object[] {
                        docRepository,
                        fieldNames,
                        fieldValues,
                        latestVersionOnly,
                        dslName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentListAsync(string docRepository, string fieldNames, string fieldValues, bool latestVersionOnly, string dslName) {
            this.GetDocumentListAsync(docRepository, fieldNames, fieldValues, latestVersionOnly, dslName, null);
        }
        
        /// <remarks/>
        public void GetDocumentListAsync(string docRepository, string fieldNames, string fieldValues, bool latestVersionOnly, string dslName, object userState) {
            if ((this.GetDocumentListOperationCompleted == null)) {
                this.GetDocumentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentListOperationCompleted);
            }
            this.InvokeAsync("GetDocumentList", new object[] {
                        docRepository,
                        fieldNames,
                        fieldValues,
                        latestVersionOnly,
                        dslName}, this.GetDocumentListOperationCompleted, userState);
        }
        
        private void OnGetDocumentListOperationCompleted(object arg) {
            if ((this.GetDocumentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentListCompleted(this, new GetDocumentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Hello", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Hello(string callerName) {
            object[] results = this.Invoke("Hello", new object[] {
                        callerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloAsync(string callerName) {
            this.HelloAsync(callerName, null);
        }
        
        /// <remarks/>
        public void HelloAsync(string callerName, object userState) {
            if ((this.HelloOperationCompleted == null)) {
                this.HelloOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloOperationCompleted);
            }
            this.InvokeAsync("Hello", new object[] {
                        callerName}, this.HelloOperationCompleted, userState);
        }
        
        private void OnHelloOperationCompleted(object arg) {
            if ((this.HelloCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloCompleted(this, new HelloCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ImportDocIntoVaultCompletedEventHandler(object sender, ImportDocIntoVaultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportDocIntoVaultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportDocIntoVaultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ImportDocIntoVaultByVaultTypeCompletedEventHandler(object sender, ImportDocIntoVaultByVaultTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportDocIntoVaultByVaultTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportDocIntoVaultByVaultTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ImportDocByStreamCompletedEventHandler(object sender, ImportDocByStreamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportDocByStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportDocByStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void ImportDocByStreamByVaultTypeCompletedEventHandler(object sender, ImportDocByStreamByVaultTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportDocByStreamByVaultTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportDocByStreamByVaultTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetDocFromVaultCompletedEventHandler(object sender, GetDocFromVaultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocFromVaultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocFromVaultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string fileLocation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetDocFromVaultByVaultTypeCompletedEventHandler(object sender, GetDocFromVaultByVaultTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocFromVaultByVaultTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocFromVaultByVaultTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string fileLocation {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetLatestDocStreamCompletedEventHandler(object sender, GetLatestDocStreamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestDocStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestDocStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public byte[] docStream {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string fileType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetLatestDocStringCompletedEventHandler(object sender, GetLatestDocStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestDocStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestDocStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string docStream {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string fileType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void GetDocumentListCompletedEventHandler(object sender, GetDocumentListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    public delegate void HelloCompletedEventHandler(object sender, HelloCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591