#define CUSTOM
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using DevExpress.Skins;
using DevExpress.UserSkins;
using DevExpress.XtraBars;
using DevExpress.XtraEditors;
using Microsoft.Win32;
using NSRMCommon;
using RabbitMQ.Client;
using RabbitMQ.Client.Framing;
using RabbitMQ.Client.MessagePatterns;
using MySettings = NSRabbit_test.Properties.Settings;

namespace NSRabbit_test {

    interface IStatusHandler {
        void showError(string errorMessage);
        void showStatus(string statusMessage);
    }

    public partial class rabbit_testForm : IStatusHandler {
        #region constants
        const string KEY = "Frame";
        const string KEY_SPLITTER = "Splitter position";
        #endregion

        #region fields
        static int msgCounter = 0;
        IConnectionFactory sendFactory;
        IConnection sendConnection;
        IModel sendChannel;
        #endregion
        bool sendQRunning;
        QueueListener ql;

        #region ctor
        public rabbit_testForm() {
            InitializeComponent();
        }
        #endregion

        void showAbout(object sender,ItemClickEventArgs e) {
            Debug.Print("show About box here");
        }

        void exitApp(object sender,ItemClickEventArgs e) {
            CancelEventArgs cea = new CancelEventArgs();

            Application.Exit(cea);

            if (cea.Cancel)
                return;

            shutdownSenderQueue();
            shutdownListenerQueue();
            Application.Exit();
        }

        void formLoad(object sender,EventArgs ea) {
            int splitPos;

            WindowPositionHelper.extractFrame(Application.UserAppDataRegistry,"Frame",this);
            if ((splitPos = readRegistryInt(Application.UserAppDataRegistry,KEY_SPLITTER,-1)) > 0)
                this.splitContainerControl1.SplitterPosition = splitPos;
            this.bciGenMsg.Enabled = false;
            this.bciCreateListenQ.Enabled = true;
            this.bciCreateSendQ.Enabled = true;
        }

        int readRegistryInt(RegistryKey rk,string key,int p) {
            return Convert.ToInt32(rk.GetValue(key,p));
        }

        protected override void OnClosing(CancelEventArgs e) {
            if (!e.Cancel) {
                WindowPositionHelper.saveFrame(Application.UserAppDataRegistry,"Frame",this);
                Application.UserAppDataRegistry.SetValue(KEY_SPLITTER,this.splitContainerControl1.SplitterPosition);
                shutdownSenderQueue();
            }

            base.OnClosing(e);
        }

        [STAThread()]
        public static void Main(string[] args) {
            BonusSkins.Register();
            SkinManager.EnableFormSkins();
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new rabbit_testForm());
        }

        void bciCreateSendQ_CheckedChanged(object sender,ItemClickEventArgs e) {
            // create the sending queue
            if (sendQRunning) {
                Debug.Print("shutdown the queue");
                shutdownSenderQueue();
            } else {

                try {
                    sendFactory = QueueUtil.createFactory();
                    sendConnection = sendFactory.CreateConnection();
                    sendChannel = sendConnection.CreateModel();
#if ALL_EVENTS
                    sendConnection.ConnectionShutdown += sendConnection_ConnectionShutdown;
                    sendChannel.ModelShutdown += sendChannel_ModelShutdown;
#endif
                    sendChannel.ExchangeDeclare(MySettings.Default.exchangeName,MySettings.Default.exchangeType);
                    sendNextMessage(sendChannel);
                    sendQRunning = true;
                } catch (Exception ex) {
                    Util.show(MethodBase.GetCurrentMethod(),ex);
                }
            }
            // update the UI 
            bciCreateSendQ.Caption = sendQRunning ? "Stop Send queue" : "Create Send queue"; // Create Send queue
            this.bciGenMsg.Enabled = sendQRunning;

        }

        void sendConnection_ConnectionShutdown(IConnection connection,ShutdownEventArgs reason) {
            Util.show(MethodBase.GetCurrentMethod());
        }

        void sendChannel_ModelShutdown(IModel model,ShutdownEventArgs reason) {
            Util.show(MethodBase.GetCurrentMethod());
        }

        void shutdownSenderQueue() {
            if (sendQRunning) {
                if (sendChannel != null) {
                    sendChannel.ExchangeDelete(MySettings.Default.exchangeName);
                    if (sendChannel.IsOpen)
                        sendChannel.Close(Constants.ReplySuccess,"ok");

                    sendChannel.Dispose();
                    sendChannel = null;
                }
                if (sendConnection != null) {
                    if (sendConnection.IsOpen)
                        sendConnection.Close(Constants.ReplySuccess,"clean shutdown");
                    sendConnection.Dispose();
                    sendConnection = null;
                }
                sendFactory = null;
                sendQRunning = false;
            }
            bciCreateSendQ.Caption = sendQRunning ? "Stop Send queue" : "Create Send queue"; // Create Send queue
        }

        static void sendNextMessage(IModel channel) {
            try {
                var message = "this is  test #" + (++msgCounter);
                var body = Encoding.UTF8.GetBytes(message);
                channel.BasicPublish("logs","",null,body);
                Console.WriteLine(" [x] Sent {0}",message);
            } catch (Exception ex) {
                Util.show(MethodBase.GetCurrentMethod(),ex);
            }
        }

        void bciGenMsg_CheckedChanged(object sender,ItemClickEventArgs e) {
            // start timer to generate a message
            if (sendQRunning) {
                sendNextMessage(sendChannel);
            }
        }

        void bciCreateListenQ_CheckedChanged(object sender,ItemClickEventArgs e) {
            // create listener queue

            if (ql != null) {
                shutdownListenerQueue();
            } else {
                ql = new QueueListener(MySettings.Default.exchangeName,MySettings.Default.exchangeType,this);
                ql.start();
            }
            // update the UI
            this.bciCreateListenQ.Caption = (ql == null) ?
                "Create listener queue" :
                "stop listener";
        }

        void shutdownListenerQueue() {
            if (ql != null) {
                try {
                    ql.stop();
                } catch (Exception ex) {
                    Util.show(MethodBase.GetCurrentMethod(),ex);
                }
                ql.Dispose();
                ql = null;
            }
        }

        void IStatusHandler.showError(string errorMessage) {
            sendTextTo(this.meErrors,errorMessage);
        }

        delegate void SendTextHnadler(TextEdit te,string msg);

        void sendTextTo(TextEdit te,string msg) {
            if (this.InvokeRequired)
                this.Invoke(new SendTextHnadler(this.sendTextTo),te,msg);
            else {
                te.Text += ("\r\n" + msg);
                te.SelectAll();
                te.SelectionStart = te.SelectionLength + 1;
                te.ScrollToCaret();
            }
        }

        void IStatusHandler.showStatus(string statusMessage) {
            sendTextTo(this.meOutput,statusMessage);
        }

        void bbiMelvin_ItemClick(object sender,ItemClickEventArgs e) {
            byte[] replyMessagesBytes,blah2;

            replyMessagesBytes = new byte[4 * 1024];

            try {
                // connecting to 
                // const string CUSTOM_HOST = "172.16.143.199";
                // const int CUSTOM_PORT = 5672;
                var avar = QueueUtil.createFactory();

                using (var blah = avar.CreateConnection()) {
                    using (IModel ch = blah.CreateModel()) {
                        // I need to connect 
                        SimpleRpcClient client = new SimpleRpcClient(ch,"YEOJAUQ2V0XYJ3YD");
                        client.TimeoutMilliseconds = 5000;
                        client.TimedOut += client_TimedOut;
                        client.Disconnected += client_Disconnected;
                        blah2 = client.Call(replyMessagesBytes);
                        Util.show(MethodBase.GetCurrentMethod());
                    }
                }
            } catch (Exception ex) {
                Util.show(MethodBase.GetCurrentMethod(),ex);
            }
        }

        void client_Disconnected(object sender,EventArgs e) {
            Util.show(MethodBase.GetCurrentMethod());
        }

        void client_TimedOut(object sender,EventArgs e) {
            Util.show(MethodBase.GetCurrentMethod());
        }
    }
}